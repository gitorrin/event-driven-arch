# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  StepFunctions example

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  
  # This is an SQS queue with all default configuration properties. To learn more about the available options, see
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
  SimpleQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SimpleQueueDLQ.Arn
        maxReceiveCount: 3
  
  # This is the DLQ for the SimpleQueue
  SimpleQueueDLQ:
    Type: AWS::SQS::Queue
    
  DynamoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Orders
      PrimaryKey: 
        Name: MessageId
        Type: String
        
  # This is an SNS Topic with all default configuration properties. To learn more about the available options, see
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html
  SimpleTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt WebhooksQueue.Arn
          Protocol: sqs
  
  QueueApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: ApiQueuePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource: !GetAtt SimpleQueue.Arn
  
  # This is the API Gateway with an SQS queue as a backend
  # SAM does not support, for now, connecting an SQS queue to API Gateway, need to use the Swagger doc
  # Example from: https://github.com/aws/serverless-application-model/issues/651
  QueueApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        paths:
          "/":
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                credentials: !GetAtt QueueApiGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path//"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: !Sub "Action=SendMessage##\n&QueueUrl=$util.urlEncode('${SimpleQueue}')##\n\
                    &MessageBody=$util.urlEncode($input.body)##\n"
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
            
  SQSFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
      - PolicyName: "PutItem"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - dynamodb:PutItem
            Resource: !GetAtt DynamoTable.Arn
      - PolicyName: "StartExecution"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - states:StartExecution
            Resource: !GetAtt OrderProcessingStateMachine.Arn
            
  PostDynamoFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
      - PolicyName: "PutItem"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            Resource: !GetAtt DynamoTable.Arn
  
  SnsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
      - PolicyName: "PublishToSns"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - sns:Publish
            # Ref on SNS returns the ARN
            Resource: !Ref SimpleTopic
  
  # This is the Lambda function definition associated with the source code: sqs-payload-logger.js. For all available properties, see
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  SQSPayloadLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs12.x
      CodeUri: functions/sqs/
      Handler: sqs-payload-logger.sqsPayloadLoggerHandler
      Environment:
        Variables:
          TABLE: !Ref DynamoTable
          StateMachine: !GetAtt OrderProcessingStateMachine.Arn
      # This property associates this Lambda function with the SQS queue defined above, so that whenever the queue
      # receives a message, the Lambda function is invoked
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SimpleQueue.Arn
            # Try also with batchSize 10 - update lambda code, error processing
            BatchSize: 1
      MemorySize: 128
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Tracing: Active
      Role:
        Fn::Sub: ${SQSFunctionRole.Arn}
      
  ProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/process/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Tracing: Active
  
  SaveFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/save/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE: !Ref DynamoTable
      Tracing: Active
      Role:
        Fn::Sub: ${PostDynamoFunctionRole.Arn}
  
  SendFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/send/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Tracing: Active
      Environment:
        Variables:
          Topic: !Ref SimpleTopic
      Role:
        Fn::Sub: ${SnsFunctionRole.Arn}
  
  FailureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fail/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Tracing: Active
      Environment:
        Variables:
          Topic: !Ref SimpleTopic
      Role:
        Fn::Sub: ${SnsFunctionRole.Arn}
  
  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE: !Ref DynamoTable
      Tracing: Active
      Role:
        Fn::Sub: ${PostDynamoFunctionRole.Arn}

  OrderProcessingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/process_order.asl.json
      DefinitionSubstitutions:
        SaveFunctionArn: !GetAtt SaveFunction.Arn
        ProcessFunctionArn: !GetAtt ProcessFunction.Arn
        SendFunctionArn: !GetAtt SendFunction.Arn
        FailureFunctionArn: !GetAtt FailureFunction.Arn
        UpdateFunctionArn: !GetAtt UpdateFunction.Arn
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref SaveFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ProcessFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref FailureFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateFunction
            
  SNSPayloadLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SNS topic.
      Runtime: nodejs12.x
      CodeUri: functions/sns/
      Handler: sns-payload-logger.snsPayloadLoggerHandler
      # This property associates this Lambda function with the SNS topic defined above, so that whenever the topic
      # receives a message, the Lambda function is invoked
      Events:
        SNSTopicEvent:
          Type: SNS
          Properties:
            Topic: !Ref SimpleTopic
      MemorySize: 128
      Timeout: 100
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 2
        DestinationConfig:
          OnSuccess:
            Type: SQS
            Destination: !GetAtt SuccessDestination.Arn
          OnFailure:
            Type: SQS
            Destination: !GetAtt FailureDestination.Arn
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - AmazonSQSFullAccess
        
  FailureDestination:
    Type: AWS::SQS::Queue
    
  SuccessDestination:
    Type: AWS::SQS::Queue
    
  WebhooksQueue:
    Type: AWS::SQS::Queue
  
  MyQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt WebhooksQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SimpleTopic
      Queues:
        - !Ref WebhooksQueue
    
  WebhooksCaller:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that calls the client webhooks endpoint
      Runtime: nodejs12.x
      CodeUri: functions/webhooks/
      Handler: webhooks-caller.webhooksCaller
      # This property associates this Lambda function with the SQS queue defined above, so that whenever the queue
      # receives a message, the Lambda function is invoked
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WebhooksQueue.Arn
            # Try also with batchSize 10 - update lambda code, error processing
            BatchSize: 1
      MemorySize: 128
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Tracing: Active
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
    
  
        
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  Api:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${QueueApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  SQSFunction:
    Description: "SQS Lambda Function ARN"
    Value: !GetAtt SQSPayloadLogger.Arn
  SNSFunction:
    Description: "SNS Lambda Function ARN"
    Value: !GetAtt SNSPayloadLogger.Arn
  StateMachine:
    Description: "StepFunctions state machine"
    Value: !GetAtt OrderProcessingStateMachine.Arn
 
